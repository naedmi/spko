 5 a) Lösen Sie die Aufgaben von Folie 25 (rechte Spalte der Tabelle),
 26 (Berechnung Fakultät)
 und 28 (Anfragen letzter Spiegelpunkt) aus Eck-Prolog.pdf.

 25: Matching von Listen
 ?- [X,Y,Z] = [john,likes,fish] .
 X = john,
 Y = likes,
 Z = fish

 ?- [cat] = [X|Y] .
 X = cat,
 Y = []

 ?- [X,Y|Z] = [mary,likes,wine] .
 X = mary,
 Y = likes,
 Z = [wine]

 ?- [[the,Y]|Z] = [[X,hare],[is,here]] .
 X = the,
 Y = hare,
 Z = [[is, here]]

 ?- [golden|T] = [golden,norfolk] .
 T = [norfolk]

 ?- [white,horse] = [horse,X] .
 false

 ?- [white|Q] = [P,horse] .
 P = white,
 Q = [horse]


 26: Definieren Sie die Berechnung der Fakultät in Prolog.
 % Base case: Factorial of 0 is 1
 factorial(0, 1).

 % Recursive case: Factorial of N is N multiplied by the factorial of N-1
 factorial(N, Result) :-
     N > 0,
     N1 is N - 1,
     factorial(N1, SubResult),
     Result is N * SubResult.

 ?- factorial(10, Result).
    Result = 3628800

 ?- factorial(0, Result).
    Result = 1

 28: Was berechnen folgende Anfragen?

 append(X, Y, [1,2,3,4]).
 X = [],
 Y = [1, 2, 3, 4]

 X = [1],
 Y = [2, 3, 4]

 X = [1, 2],
 Y = [3, 4]

 X = [1, 2, 3],
 Y = [4]

 X = [1, 2, 3, 4],
 Y = []

 false

 ---------------------------------------------

 append(X, [1,2,3,4], Y).
 X = []
 Y = [1,2,3,4]

 oder beliebiger Inhalt von X, der mit Y zusammen eine Liste ergibt, die
 [1,2,3,4] und den Inhalt von X enthält.

b) Programmieren Sie ein Prädikat sum, das die Summe einer Liste von Zahlen berechnet.
   Hinweis: Sie müssen Rekursion verwenden.

% Base case: Sum of empty array is 0
sum([], 0).

% Recursive case: Sum of List is Head plus the sum of Tail
sum(List, Result) :-
    List = [Head|Tail],
    sum(Tail, SubResult),
    Result is Head + SubResult.

?-sum([2,4,8], X).
X = 14

c) Sie wollen zu einer Werksbesichtigung von BioNTech in Mainz reisen. Dazu brauchen Sie eine Bahnverbindung.
Gegeben sind die folgenden Fakten:
       zug(konstanz, 08.39, offenburg, 10.59).
       zug(konstanz, 08.39, karlsruhe, 11.49).
       zug(konstanz, 08.53, singen, 09.26).
       zug(singen, 09.37, stuttgart, 11.32).
       zug(offenburg, 11.27, mannheim, 12.24).
       zug(karlsruhe, 12.06, mainz, 13.47).
       zug(stuttgart, 11.51, mannheim, 12.28).
       zug(mannheim, 12.39, mainz, 13.18).

   Definieren Sie ein Prädikat verbindung, das beschreibt, ob zwischen zwei Städten nach einer gegebenen
   Abfahrtszeit eine Verbindung inklusive Umsteigen existiert.
   Hinweise: Sie brauchen auch hier Rekursion. Beim Umsteigen muss Abfahrtszeit > Ankunftszeit gelten.

   Eine Abfrage verbindung(konstanz, 8.00, mainz, Reiseplan) soll nacheinander die möglichen Reiseverbindungen
   nach 8 Uhr in der Variablen Reiseplan liefern.
   Die Variable Reiseplan soll eine Liste von Teilstrecken in Form von zug-Strukturen sein.

% Base case: Direct connection between Start and Destination

verbindung(Start, Startzeit, Ziel, Reiseplan) :-
    zug(Start, Abfahrtszeit, Ziel, Ankunftszeit),
    Abfahrtszeit > Startzeit,
    Reiseplan = [zug(Start, Abfahrtszeit, Ziel, Ankunftszeit)].

% Recursive case: Connection between Start and Destination with change

verbindung(Start, Startzeit, Ziel, Reiseplan) :-
    zug(Start, Abfahrtszeit, Zwischenziel, Ankunftszeit),
    Abfahrtszeit > Startzeit,
    verbindung(Zwischenziel, Ankunftszeit, Ziel, SubReiseplan),
    Reiseplan = [zug(Start, Abfahrtszeit, Zwischenziel, Ankunftszeit)|SubReiseplan].

?- verbindung(konstanz, 8.00, stuttgart, X).
X = [zug(konstanz,8.53,singen,9.26), zug(singen,9.37,stuttgart,11.32)]

?- verbindung(konstanz, 8.00, mainz, X).
X = [zug(konstanz,8.39,offenburg,10.59), zug(offenburg,11.27,mannheim,12.24), zug(mannheim,12.39,mainz,13.18)]
X = [zug(konstanz,8.39,karlsruhe,11.49), zug(karlsruhe,12.06,mainz,13.47)]
X = [zug(konstanz,8.53,singen,9.26), zug(singen,9.37,stuttgart,11.32), zug(stuttgart,11.51,mannheim,12.28),
    zug(mannheim,12.39,mainz,13.18)]